{"version":3,"sources":["reducers.js","export.js","table.js","App.js","serviceWorker.js","index.js"],"names":["initialState","stories","id","uuidv4","role","action","purpose","tests","text","getEmptyStory","getEmptyTest","generateMD","data","result","forEach","story","push","tableLine","map","test","testId","join","useSelector","state","exportMD","React","mdData","blob","Blob","type","saveAs","style","marginTop","Paper","TextField","value","variant","multiline","width","display","alignItems","flexDirection","Button","color","onClick","getRowId","row","FocusableCell","restProps","Cell","tabIndex","onFocus","RowDetail","dispatch","useDispatch","useState","setText","addTest","useCallback","storyId","deleteTest","paddingBottom","length","Chip","key","label","onDelete","marginRight","onChange","e","target","columns","name","title","getCellValue","editingStateColumnExtensions","columnName","editingEnabled","setData","editingCells","setEditingCells","addEmptyStory","rows","onCommitChanges","added","changed","deleted","onEditingCellsChange","addedRows","onAddedRowsChange","columnExtensions","cellComponent","selectTextOnEditStart","showAddCommand","showDeleteCommand","contentComponent","App","className","textAlign","Boolean","window","location","hostname","match","store","createStore","deletedSet","Set","nextStories","filter","has","reduce","acc","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eefb2588.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n  stories: [{\n    id: uuidv4(),\n    role: 'Story Tailer',\n    action: 'make stories',\n    purpose: 'make my work convenient',\n    tests: [{\n      id: uuidv4(),\n      text: 'Open Story Creator App'\n    }, {\n      id: uuidv4(),\n      text: 'Enjoy ðŸ˜ƒ',\n    }]\n  }],\n}\n\nconst getEmptyStory = () => ({\n  id: uuidv4(),\n  role: '',\n  action: '',\n  purpose: '',\n  tests: [],\n});\n\nconst getEmptyTest = (text) => ({\n  id: uuidv4(),\n  text,\n});\n\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'addStory': { // OK\n      return {\n        stories: [...state.stories, getEmptyStory()] \n      };\n    }\n    case 'deleteStory': { // OK\n      const deletedSet = new Set(action.deleted);\n      const nextStories = state.stories.filter(row => !deletedSet.has(row.id));\n\n      return {\n        stories: nextStories,\n      };\n    }\n    case 'changeStory': { // OK\n      const nextStories = state.stories.map(row => (action.changed[row.id] ? { ...row, ...action.changed[row.id] } : row));\n      return {\n        stories: nextStories,\n      };\n    }\n    case 'addTest': { //OK\n      const nextStories = state.stories.reduce((acc, story) => {\n        if (action.storyId === story.id) {\n          story.tests.push(getEmptyTest(action.text));\n        }\n        acc.push(story);\n        return acc;\n      }, []);\n\n      return {\n        stories: nextStories,\n      };\n    }\n    case 'deleteTest': { // OK\n      const nextStories = state.stories.map((story) => {\n        if (story.id === action.storyId) {\n          story.tests = story.tests.filter(test => test.id !== action.testId);\n        } return story;\n      });\n\n      return {\n        stories: nextStories,\n      };\n    }\n    default:\n      return state;\n  }\n}","import * as React from 'react';\nimport { saveAs } from 'file-saver';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\n\n// { name: 'id', title: '#id' },\n// { name: 'role', title: 'Role' },\n// { name: 'action', title: 'Action' },\n// { name: 'purpose', title: 'Purpose' },\n\nconst generateMD = (data) => {\n  const result = ['#### User Stories\\n'];\n\n  data.forEach((story, id) => {\n    result.push(`${id + 1}. As a ${story.role}, I want to be able to ${story.action} so that to ${story.purpose}.`);\n  });\n\n  result.push('\\n#### Acceptance Criteria & Tests');\n  result.push('\\n| ID | Criteria | Test |');\n\n  data.forEach((story, id) => {\n    const tableLine = `| ${id + 1} | Capability to ${story.action} | ${story.tests.map((test, testId) => `${testId}. ${test.text} `).join('')} |`;\n    result.push(tableLine);\n  });\n\n  return result.join('\\n');\n};\n\nexport default () => {\n  const stories = useSelector(state => state.stories);\n\n  const exportMD = React.useCallback(() => {\n    const filename = \"data.md\";\n    const mdData = generateMD(stories);\n\n    const blob = new Blob([mdData], {\n      type: 'text/plain;charset=utf-8'\n    });\n\n    saveAs(blob, filename);\n  }, [stories]);\n\n  return (\n    <React.Fragment>\n      <p style={{ marginTop: '21px' }}>\n        <Paper>\n          <TextField value={generateMD(stories)} variant=\"outlined\" multiline style={{ width: '100%' }} />\n        </Paper>\n      </p>\n      <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column', marginTop: '14px' }}>\n        <Button variant=\"outlined\" color=\"primary\" onClick={exportMD}>\n          Export md file\n        </Button>\n      </div>\n    </React.Fragment>\n  );\n};","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { EditingState, RowDetailState } from '@devexpress/dx-react-grid';\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableEditColumn,\n  TableRowDetail,\n  TableInlineCellEditing,\n} from '@devexpress/dx-react-grid-material-ui';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst getRowId = row => row.id;\n\nconst FocusableCell = ({ onClick, ...restProps }) => (\n  <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\n);\n\nconst RowDetail = ({ row }) => {\n  const dispatch = useDispatch();\n  const [text, setText] = React.useState('');\n  const addTest = React.useCallback(() => {\n    setText('');\n    dispatch({ type: 'addTest', storyId: row.id, text });\n  }, [row, text, dispatch]);\n  const deleteTest = React.useCallback((testId) => dispatch({ type: 'deleteTest', testId, storyId: row.id }), [row, dispatch]);\n\n  return (\n    <div>\n      <div style={{ paddingBottom: '8px' }}>\n        {row.tests.length ? row.tests.map(test => (\n          <Chip\n            key={test.id}\n            label={test.text}\n            onDelete={() => deleteTest(test.id)}\n            style={{ marginRight: '8px' }}\n          />\n        )) : (\n          <p>\n            No tests here.\n          </p>\n        )}\n      </div>\n\n      <div>\n        <TextField variant=\"filled\" value={text} onChange={e => setText(e.target.value)} />\n        <Button color=\"primary\" onClick={addTest}>\n          Add\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst columns = [\n  { name: 'role', title: 'Role' },\n  { name: 'action', title: 'Action' },\n  { name: 'purpose', title: 'Purpose' },\n  { name: 'tests', title: 'Tests exist', getCellValue: row => row.tests.length > 0 ? 'true' : 'false' },\n];\n\nconst editingStateColumnExtensions = [\n  { columnName: 'tests', editingEnabled: false },\n];\n\nexport default ({ data, setData }) => {\n  const stories = useSelector(state => state.stories);\n  const dispatch = useDispatch();\n  const [editingCells, setEditingCells] = useState([]);\n  const addEmptyStory = React.useCallback(() => dispatch({ type: 'addStory' }), [dispatch]);\n\n  const commitChanges = ({ added, changed, deleted }) => {\n    if (changed) {\n      dispatch({ type: 'changeStory', changed });\n    }\n    if (deleted) {\n      dispatch({ type: 'deleteStory', deleted });\n    }\n  };\n\n  return (\n    <Paper>\n      <Grid\n        rows={stories}\n        columns={columns}\n        getRowId={getRowId}\n      >\n        <RowDetailState />\n        <EditingState\n          onCommitChanges={commitChanges}\n          editingCells={editingCells}\n          onEditingCellsChange={setEditingCells}\n          addedRows={[]}\n          onAddedRowsChange={addEmptyStory}\n          columnExtensions={editingStateColumnExtensions}\n        />\n        <Table cellComponent={FocusableCell} />\n        <TableHeaderRow />\n        <TableInlineCellEditing selectTextOnEditStart />\n        <TableEditColumn\n          showAddCommand\n          showDeleteCommand\n        />\n        <TableRowDetail\n          contentComponent={RowDetail}\n        />\n      </Grid>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport Export from './export';\nimport Table from './table';\n\nfunction App() {\n  const [data, setData] = React.useState([]);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3 style={{ textAlign: 'center' }}>\n          Make stories by adding data into the table. Just click on any cell to enable editing mode.\n        </h3>\n        <Table data={data} setData={setData} />\n        <Export data={data} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}