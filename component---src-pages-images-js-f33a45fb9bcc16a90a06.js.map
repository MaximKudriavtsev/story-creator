{"version":3,"sources":["webpack:///./src/api/database.js","webpack:///./src/pages/images.js"],"names":["getHtml","template","join","AWS","config","update","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","Bucket","viewAlbum","albumName","albumPhotosKey","encodeURIComponent","listObjects","Prefix","err","data","alert","message","bucketUrl","this","request","httpRequest","endpoint","href","photos","Contents","map","photo","photoKey","Key","replace","length","htmlTemplate","document","getElementById","innerHTML","window","createAlbum","trim","indexOf","albumKey","headObject","code","putObject","SecondPage","React","useEffect","id","type","accept","onClick","files","file","fileName","name","ManagedUpload","Body","ACL","promise","then","console","log","addPhoto"],"mappings":"mJAMA,SAASA,EAAQC,GACf,OAAOA,EAASC,KAAK,MAGvBC,IAAIC,OAAOC,OAAO,CAChBC,OARmB,eASnBC,YAAa,IAAIJ,IAAIK,2BAA2B,CAC9CC,eATmB,wDAavB,IAAMC,EAAK,IAAIP,IAAIQ,GAAG,CACpBC,WAAY,aACZC,OAAQ,CAAEC,OAjBY,wBAsFjB,SAASC,EAAUC,GACxB,IAAIC,EAAiBC,mBAAmBF,GAAa,IACrDN,EAAGS,YAAY,CAAEC,OAAQH,IAAkB,SAASI,EAAKC,GACvD,GAAID,EACF,OAAOE,MAAM,0CAA4CF,EAAIG,SAG/D,IACIC,EADOC,KAAKC,QAAQC,YAAYC,SAASC,KAC7BA,sBAEZC,EAAST,EAAKU,SAASC,KAAI,SAASC,GACtC,IAAIC,EAAWD,EAAME,IAErB,OAAOpC,EAAQ,CACb,SACA,QACA,gDAJayB,EAAYP,mBAAmBiB,IAIgB,MAC5D,SACA,QACA,gCACEnB,EACA,MACAmB,EACA,QACF,IACA,UACA,SACAA,EAASE,QAAQpB,EAAgB,IACjC,UACA,SACA,eAGAO,EAAUO,EAAOO,OACjB,4CACA,sEACAC,EAAe,CACjB,OACA,UAAYvB,EACZ,QACAQ,EACA,QACAxB,EAAQ+B,GACR,SACA,wDACA,6CAA+Cf,EAAY,QAC3D,YACA,YACA,kCACA,iBACA,aAEFwB,SAASC,eAAe,OAAOC,UAAY1C,EAAQuC,MAtDvDI,OAAOC,YA1BA,SAAqB5B,GAE1B,KADAA,EAAYA,EAAU6B,QAEpB,OAAOtB,MAAM,8DAEf,IAAgC,IAA5BP,EAAU8B,QAAQ,KACpB,OAAOvB,MAAM,uCAEf,IAAIwB,EAAW7B,mBAAmBF,GAClCN,EAAGsC,WAAW,CAAEZ,IAAKW,IAAY,SAAS1B,EAAKC,GAC7C,OAAKD,EAGY,aAAbA,EAAI4B,KACC1B,MAAM,2CAA6CF,EAAIG,cAEhEd,EAAGwC,UAAU,CAAEd,IAAKW,IAAY,SAAS1B,EAAKC,GAC5C,GAAID,EACF,OAAOE,MAAM,2CAA6CF,EAAIG,SAEhED,MAAM,+BACNR,EAAUC,MAVHO,MAAM,6BC3CJ4B,UAtBI,WAKjB,OAJAC,IAAMC,WAAU,WACdtC,EAJe,WAQf,oCACE,mDACA,yBAAKuC,GAAG,QACR,8BAGA,6BACE,2BAAOA,GAAG,cAAcC,KAAK,OAAOC,OAAO,YAC3C,4BAAQF,GAAG,WAAWG,QAAS,kBD4HhC,SAAkBzC,GACvB,IAAI0C,EAAQlB,SAASC,eAAe,eAAeiB,MACnD,IAAKA,EAAMpB,OACT,OAAOf,MAAM,yCAEf,IAAIoC,EAAOD,EAAM,GACbE,EAAWD,EAAKE,KAGhB1B,EAFiBjB,mBAAmBF,GAAa,IAErB4C,EAGnB,IAAIzD,IAAIQ,GAAGmD,cAAc,CACpCjD,OAAQ,CACNC,OA5JkB,qBA6JlBsB,IAAKD,EACL4B,KAAMJ,EACNK,IAAK,iBAIYC,UAEbC,MACN,SAAS5C,GACPC,MAAM,gCACN4C,QAAQC,IAAI9C,GACZP,EAAUC,MAEZ,SAASK,GACP,OAAOE,MAAM,4CAA6CF,EAAIG,YC1JvB6C,CAhB1B,UAgBX","file":"component---src-pages-images-js-f33a45fb9bcc16a90a06.js","sourcesContent":["import AWS from 'aws-sdk';\n\nconst albumBucketName = \"user-story-creator\";\nconst bucketRegion = \"eu-central-1\";\nconst IdentityPoolId = \"eu-central-1:5786ef9b-b058-45e7-b698-aca2f1007fe9\";\n\nfunction getHtml(template) {\n  return template.join('\\n');\n}\n\nAWS.config.update({\n  region: bucketRegion,\n  credentials: new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: IdentityPoolId\n  })\n});\n\nconst s3 = new AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: { Bucket: albumBucketName }\n});\n\nexport function listAlbums() {\n  s3.listObjects({ Delimiter: \"/\" }, function(err, data) {\n    if (err) {\n      return alert(\"There was an error listing your albums: \" + err.message);\n    } else {\n      var albums = data.CommonPrefixes.map(function(commonPrefix) {\n        var prefix = commonPrefix.Prefix;\n        var albumName = decodeURIComponent(prefix.replace(\"/\", \"\"));\n        return getHtml([\n          \"<li>\",\n          \"<span onclick=\\\"deleteAlbum('\" + albumName + \"')\\\">X</span>\",\n          \"<span onclick=\\\"viewAlbum('\" + albumName + \"')\\\">\",\n          albumName,\n          \"</span>\",\n          \"</li>\"\n        ]);\n      });\n      var message = albums.length\n        ? getHtml([\n            \"<p>Click on an album name to view it.</p>\",\n            \"<p>Click on the X to delete the album.</p>\"\n          ])\n        : \"<p>You do not have any albums. Please Create album.\";\n      var htmlTemplate = [\n        \"<h2>Albums</h2>\",\n        message,\n        \"<ul>\",\n        getHtml(albums),\n        \"</ul>\",\n        \"<button onclick=\\\"createAlbum(prompt('Enter Album Name:'))\\\">\",\n        \"Create New Album\",\n        \"</button>\"\n      ];\n      document.getElementById(\"app\").innerHTML = getHtml(htmlTemplate);\n    }\n  });\n}\n\nexport function createAlbum(albumName) {\n  albumName = albumName.trim();\n  if (!albumName) {\n    return alert(\"Album names must contain at least one non-space character.\");\n  }\n  if (albumName.indexOf(\"/\") !== -1) {\n    return alert(\"Album names cannot contain slashes.\");\n  }\n  var albumKey = encodeURIComponent(albumName);\n  s3.headObject({ Key: albumKey }, function(err, data) {\n    if (!err) {\n      return alert(\"Album already exists.\");\n    }\n    if (err.code !== \"NotFound\") {\n      return alert(\"There was an error creating your album: \" + err.message);\n    }\n    s3.putObject({ Key: albumKey }, function(err, data) {\n      if (err) {\n        return alert(\"There was an error creating your album: \" + err.message);\n      }\n      alert(\"Successfully created album.\");\n      viewAlbum(albumName);\n    });\n  });\n}\n\nwindow.createAlbum = createAlbum;\n\nexport function viewAlbum(albumName) {\n  var albumPhotosKey = encodeURIComponent(albumName) + \"/\";\n  s3.listObjects({ Prefix: albumPhotosKey }, function(err, data) {\n    if (err) {\n      return alert(\"There was an error viewing your album: \" + err.message);\n    }\n    // 'this' references the AWS.Response instance that represents the response\n    var href = this.request.httpRequest.endpoint.href;\n    var bucketUrl = href + albumBucketName + \"/\";\n\n    var photos = data.Contents.map(function(photo) {\n      var photoKey = photo.Key;\n      var photoUrl = bucketUrl + encodeURIComponent(photoKey);\n      return getHtml([\n        \"<span>\",\n        \"<div>\",\n        '<img style=\"width:128px;height:128px;\" src=\"' + photoUrl + '\"/>',\n        \"</div>\",\n        \"<div>\",\n        \"<span onclick=\\\"deletePhoto('\" +\n          albumName +\n          \"','\" +\n          photoKey +\n          \"')\\\">\",\n        \"X\",\n        \"</span>\",\n        \"<span>\",\n        photoKey.replace(albumPhotosKey, \"\"),\n        \"</span>\",\n        \"</div>\",\n        \"</span>\"\n      ]);\n    });\n    var message = photos.length\n      ? \"<p>Click on the X to delete the photo</p>\"\n      : \"<p>You do not have any photos in this album. Please add photos.</p>\";\n    var htmlTemplate = [\n      \"<h2>\",\n      \"Album: \" + albumName,\n      \"</h2>\",\n      message,\n      \"<div>\",\n      getHtml(photos),\n      \"</div>\",\n      '<input id=\"photoupload\" type=\"file\" accept=\"image/*\">',\n      '<button id=\"addphoto\" onclick=\"addPhoto(\\'' + albumName + \"')\\\">\",\n      \"Add Photo\",\n      \"</button>\",\n      '<button onclick=\"listAlbums()\">',\n      \"Back To Albums\",\n      \"</button>\"\n    ];\n    document.getElementById(\"app\").innerHTML = getHtml(htmlTemplate);\n  });\n}\n\nexport function addPhoto(albumName) {\n  var files = document.getElementById(\"photoupload\").files;\n  if (!files.length) {\n    return alert(\"Please choose a file to upload first.\");\n  }\n  var file = files[0];\n  var fileName = file.name;\n  var albumPhotosKey = encodeURIComponent(albumName) + \"/\";\n\n  var photoKey = albumPhotosKey + fileName;\n\n  // Use S3 ManagedUpload class as it supports multipart uploads\n  var upload = new AWS.S3.ManagedUpload({\n    params: {\n      Bucket: albumBucketName,\n      Key: photoKey,\n      Body: file,\n      ACL: \"public-read\"\n    }\n  });\n\n  var promise = upload.promise();\n\n  promise.then(\n    function(data) {\n      alert(\"Successfully uploaded photo.\");\n      console.log(data);\n      viewAlbum(albumName);\n    },\n    function(err) {\n      return alert(\"There was an error uploading your photo: \", err.message);\n    }\n  );\n}\n\nexport function deletePhoto(albumName, photoKey) {\n  s3.deleteObject({ Key: photoKey }, function(err, data) {\n    if (err) {\n      return alert(\"There was an error deleting your photo: \", err.message);\n    }\n    alert(\"Successfully deleted photo.\");\n    viewAlbum(albumName);\n  });\n}\n\nexport function deleteAlbum(albumName) {\n  var albumKey = encodeURIComponent(albumName) + \"/\";\n  s3.listObjects({ Prefix: albumKey }, function(err, data) {\n    if (err) {\n      return alert(\"There was an error deleting your album: \", err.message);\n    }\n    var objects = data.Contents.map(function(object) {\n      return { Key: object.Key };\n    });\n    s3.deleteObjects(\n      {\n        Delete: { Objects: objects, Quiet: true }\n      },\n      function(err, data) {\n        if (err) {\n          return alert(\"There was an error deleting your album: \", err.message);\n        }\n        alert(\"Successfully deleted album.\");\n        listAlbums();\n      }\n    );\n  });\n}\n","import React from \"react\"\n\nimport { listAlbums, addPhoto, viewAlbum } from '../api/database';\n\nconst ALBUM_NAME = 'test';\n\nconst SecondPage = () => {\n  React.useEffect(() => {\n    viewAlbum(ALBUM_NAME);\n  });\n\n  return (\n    <>\n      <h1>My Photo Albums App</h1>\n      <div id=\"app\"></div>\n      <div>\n\n      </div>\n      <div>\n        <input id=\"photoupload\" type=\"file\" accept=\"image/*\" />\n        <button id=\"addphoto\" onClick={() => addPhoto(ALBUM_NAME)}>\n          Upload\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default SecondPage\n"],"sourceRoot":""}